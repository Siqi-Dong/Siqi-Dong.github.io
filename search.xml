<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ArcGIS Software ISO</title>
    <url>/2020/11/12/ArcGIS-Software-ISO/</url>
    <content><![CDATA[<h1 id="ArcGIS-10-1"><a href="#ArcGIS-10-1" class="headerlink" title="ArcGIS 10.1"></a>ArcGIS 10.1</h1><p>link：<a href="https://pan.baidu.com/s/1-xrFNTSI-3pLVI5aHT9Crg">https://pan.baidu.com/s/1-xrFNTSI-3pLVI5aHT9Crg</a><br>code：yjbo<br>size: 4.3GB</p>
<h1 id="ArcGIS-10-2"><a href="#ArcGIS-10-2" class="headerlink" title="ArcGIS 10.2"></a>ArcGIS 10.2</h1><p>link：<a href="https://pan.baidu.com/s/17TJOs51JCWaRX2VYq8UBNA">https://pan.baidu.com/s/17TJOs51JCWaRX2VYq8UBNA</a><br>code：5enb<br>size: 4.99GB</p>
<h1 id="ArcGIS-10-3"><a href="#ArcGIS-10-3" class="headerlink" title="ArcGIS 10.3"></a>ArcGIS 10.3</h1><p>link：<a href="https://pan.baidu.com/s/1OkRcp2_x2XV1YB-KCV56ow">https://pan.baidu.com/s/1OkRcp2_x2XV1YB-KCV56ow</a><br>code：jxzu<br>size: 5.21GB</p>
<h1 id="ArcGIS-10-4"><a href="#ArcGIS-10-4" class="headerlink" title="ArcGIS 10.4"></a>ArcGIS 10.4</h1><p>link：<a href="https://pan.baidu.com/s/1gxN4bjU1iQ7ADys4G9XibQ">https://pan.baidu.com/s/1gxN4bjU1iQ7ADys4G9XibQ</a><br>code：23c7<br>size: 6.03GB</p>
<h1 id="ArcGIS-10-5"><a href="#ArcGIS-10-5" class="headerlink" title="ArcGIS 10.5"></a>ArcGIS 10.5</h1><p>link：<a href="https://pan.baidu.com/s/1g7F5rwOzgNAxp5IKfljSag">https://pan.baidu.com/s/1g7F5rwOzgNAxp5IKfljSag</a><br>code：bsz3<br>size: 6.21GB</p>
<h1 id="ArcGIS-10-6"><a href="#ArcGIS-10-6" class="headerlink" title="ArcGIS 10.6"></a>ArcGIS 10.6</h1><p>link：<a href="https://pan.baidu.com/s/19tKUPnagr2M6pJeES9yp8Q">https://pan.baidu.com/s/19tKUPnagr2M6pJeES9yp8Q</a><br>code：o5l0<br>size: 3.65GB</p>
<h1 id="ArcGIS-10-7"><a href="#ArcGIS-10-7" class="headerlink" title="ArcGIS 10.7"></a>ArcGIS 10.7</h1><p>link：<br>code：<br>size: </p>
<h1 id="ArcGIS-10-8"><a href="#ArcGIS-10-8" class="headerlink" title="ArcGIS 10.8"></a>ArcGIS 10.8</h1><p>link：<a href="https://pan.baidu.com/s/1laMHhwC_x4IuHMg77gidnQ">https://pan.baidu.com/s/1laMHhwC_x4IuHMg77gidnQ</a><br>code：avq2<br>size: 3.69GB</p>
]]></content>
      <categories>
        <category>Software</category>
      </categories>
  </entry>
  <entry>
    <title>Add head file to ascill</title>
    <url>/2020/10/20/Add-head-file-to-ascill/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addAsciiHeadFile</span>(<span class="params">asciiFolder</span>):</span></span><br><span class="line">    rootdir = os.path.join(asciiFolder)</span><br><span class="line">    <span class="keyword">for</span> (dirpath, dirnames, filenames) <span class="keyword">in</span> os.walk(rootdir):</span><br><span class="line">        <span class="keyword">for</span> filename <span class="keyword">in</span> filenames:</span><br><span class="line">            <span class="keyword">if</span> os.path.splitext(filename)[<span class="number">1</span>] == <span class="string">&#x27;.txt&#x27;</span>:</span><br><span class="line">                asciiPath=asciiFolder+<span class="string">&quot;\\&quot;</span>+filename</span><br><span class="line">                <span class="keyword">with</span> open(asciiPath, <span class="string">&#x27;r+&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    content = f.read()</span><br><span class="line">                    f.seek(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">                    <span class="comment"># head file content</span></span><br><span class="line">                    f.write(<span class="string">&#x27;XXX\n&#x27;</span> + <span class="string">&#x27;XXX\n&#x27;</span> + <span class="string">&#x27;XXX\n&#x27;</span> + <span class="string">&#x27;XXX\n&#x27;</span> + <span class="string">&#x27;XXX\n&#x27;</span> + <span class="string">&#x27;XXX\n&#x27;</span> + content)</span><br><span class="line">                    <span class="keyword">print</span> asciiPath + <span class="string">&quot;done!&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>TextFile</category>
      </categories>
  </entry>
  <entry>
    <title>Batch calculation of NDWI and extraction of water body from Landsat 8 OLI data</title>
    <url>/2020/11/01/Batch-calculation-of-NDWI-and-extraction-of-water-body-from-Landsat-8-OLI-data/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> arcpy</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> arcpy <span class="keyword">import</span> sa</span><br><span class="line"><span class="keyword">from</span> arcpy.sa <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> strftime</span><br><span class="line">arcpy.CheckOutExtension(<span class="string">&quot;Spatial&quot;</span>)</span><br><span class="line">arcpy.env.overwriteOutput = <span class="literal">True</span></span><br><span class="line">print(<span class="string">&quot;Program start time:&quot;</span>+strftime(<span class="string">&quot;%m/%d/%Y %H:%M&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------The parameters ---------------------------------</span></span><br><span class="line"><span class="comment"># The path to the parent folder of the unzipped folder of landsat 8 img</span></span><br><span class="line">Inputpath=<span class="string">&quot;E://waterL8data&quot;</span>                             </span><br><span class="line"><span class="comment"># Projection file</span></span><br><span class="line">projectFilePath=<span class="string">&quot;E://waterL8data//AEA_WGS_1984.prj&quot;</span>     </span><br><span class="line"><span class="comment"># Study area shp</span></span><br><span class="line">Zone=<span class="string">&quot;E://waterL8data//province.shp&quot;</span>                  </span><br><span class="line"><span class="comment"># Temp data and results data path</span></span><br><span class="line">arcpy.env.workspace=<span class="string">&quot;E://waterL8data//test&quot;</span>      </span><br><span class="line"><span class="comment"># Water extraction final result name (grid value of 1 for water, 2 for non-water)       </span></span><br><span class="line">finalwaterName=<span class="string">&quot;finalwater.tif&quot;</span>                         </span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Get all files and folders</span></span><br><span class="line">allFilesOrFoldersList = os.listdir(Inputpath)</span><br><span class="line"><span class="keyword">for</span> FileOrFolder <span class="keyword">in</span> allFilesOrFoldersList:</span><br><span class="line">    FileOrFolder_path = os.path.join(Inputpath, FileOrFolder)</span><br><span class="line">    <span class="comment"># Is folder</span></span><br><span class="line">    <span class="keyword">if</span> os.path.isdir(FileOrFolder_path):</span><br><span class="line">        FolderPath=FileOrFolder_path</span><br><span class="line">        allFilesList = os.listdir(FolderPath)</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> allFilesList:</span><br><span class="line">            fileFullPath=os.path.join(FolderPath, file)</span><br><span class="line">            <span class="comment"># No.3 band</span></span><br><span class="line">            <span class="keyword">if</span> file[<span class="number">-6</span>:] == <span class="string">&quot;B3.TIF&quot;</span>:</span><br><span class="line">                green = arcpy.Raster(fileFullPath)</span><br><span class="line">                <span class="comment"># No.6 band</span></span><br><span class="line">            <span class="keyword">elif</span> file[<span class="number">-6</span>:] == <span class="string">&quot;B6.TIF&quot;</span>:</span><br><span class="line">                Mir = arcpy.Raster(fileFullPath)</span><br><span class="line">                <span class="comment"># NDWI</span></span><br><span class="line">                MNDVI=(green-Mir)*<span class="number">1.0</span>/(green+Mir)</span><br><span class="line">                <span class="comment"># NDWI correction</span></span><br><span class="line">                MNDVIcor=Con((MNDVI&gt;<span class="number">0.05</span>) &amp; (Mir&lt;<span class="number">7200</span>),<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">                <span class="comment"># Remove the black edge</span></span><br><span class="line">                outputPath=FileOrFolder+<span class="string">&quot;.tif&quot;</span></span><br><span class="line">                arcpy.CopyRaster_management(MNDVIcor, outputPath, <span class="string">&quot;&quot;</span>, <span class="number">0</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">                print(FolderPath+<span class="string">&quot;CopyRaster success&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Mosaic rasters</span></span><br><span class="line">rasters=[]</span><br><span class="line"><span class="keyword">for</span> raster <span class="keyword">in</span> arcpy.ListRasters(<span class="string">&quot;*.tif&quot;</span>):</span><br><span class="line">    rasters.append(raster)</span><br><span class="line">arcpy.MosaicToNewRaster_management(rasters, str(arcpy.env.workspace), <span class="string">&quot;water.tif&quot;</span>, <span class="string">&quot;&quot;</span>,<span class="string">&quot;8_BIT_UNSIGNED&quot;</span>, <span class="string">&quot;30&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;MINIMUM&quot;</span>,<span class="string">&quot;FIRST&quot;</span>)</span><br><span class="line">print(<span class="string">&quot;Mosaic success&quot;</span>)</span><br><span class="line"></span><br><span class="line">water= <span class="string">&quot;water.tif&quot;</span></span><br><span class="line">arcpy.ProjectRaster_management(water, <span class="string">&quot;water_rep.tif&quot;</span>,projectFilePath, <span class="string">&quot;NEAREST&quot;</span>, <span class="string">&quot;30&quot;</span>,<span class="string">&quot;#&quot;</span>, <span class="string">&quot;#&quot;</span>, <span class="string">&quot;#&quot;</span>)</span><br><span class="line">print(<span class="string">&quot;ProjectRaster success&quot;</span>)</span><br><span class="line"></span><br><span class="line">ExtractByMask(<span class="string">&quot;water.tif&quot;</span>,Zone).save(finalwaterName)</span><br><span class="line">print(<span class="string">&quot;ExtractByMask success&quot;</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;program end time:&quot;</span>+strftime(<span class="string">&quot;%m/%d/%Y %H:%M&quot;</span>))</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>DataAnalysis</category>
      </categories>
  </entry>
  <entry>
    <title>Batch download DEM data from Geospatial Data Cloud</title>
    <url>/2020/10/25/Batch-download-DEM-data-from-Geospatial-Data-Cloud/</url>
    <content><![CDATA[<h1 id="Data-Source"><a href="#Data-Source" class="headerlink" title="Data Source"></a>Data Source</h1><p><a href="http://www.gscloud.cn/">http://www.gscloud.cn/</a></p>
 <div style="margin: 0 auto;overflow: hidden;">
 <img src="/2020/10/25/Batch-download-DEM-data-from-Geospatial-Data-Cloud/GeoDataCloud.png" alt>
 </div>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"></span><br><span class="line"><span class="comment"># chromedriver.exe path</span></span><br><span class="line">driver=webdriver.Chrome(executable_path=<span class="string">&#x27;XXX\\chromedriver.exe&#x27;</span>)</span><br><span class="line">driver.get(<span class="string">&#x27;http://www.gscloud.cn/accounts/login_user&#x27;</span>)</span><br><span class="line">email=driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;email&quot;]&#x27;</span>)</span><br><span class="line"><span class="comment"># Your gscloud email address</span></span><br><span class="line">email.send_keys(<span class="string">&#x27;XXX&#x27;</span>)</span><br><span class="line">password=driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;password&quot;]&#x27;</span>)</span><br><span class="line"><span class="comment"># Your gscloud password</span></span><br><span class="line">password.send_keys(<span class="string">&#x27;XXX&#x27;</span>)</span><br><span class="line"></span><br><span class="line">captcha=driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;id_captcha_1&quot;]&#x27;</span>)</span><br><span class="line">captcha_sj=input(<span class="string">&#x27;Please enter the code：&#x27;</span>).strip()</span><br><span class="line">captcha.send_keys(captcha_sj)</span><br><span class="line"></span><br><span class="line">dr_buttoon=driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;login-form&quot;]/input[2]&#x27;</span>).click()</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line">sjzy=driver.find_element_by_link_text(<span class="string">&#x27;数据资源&#x27;</span>).click()</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line">sjzy=driver.find_element_by_link_text(<span class="string">&#x27;公开数据&#x27;</span>).click()</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line">sjzy=driver.find_element_by_link_text(<span class="string">&#x27;DEM 数字高程数据&#x27;</span>).click()</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line">sjzy=driver.find_element_by_link_text(<span class="string">&#x27;GDEMV2 30M 分辨率数字高程数据&#x27;</span>).click()</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2261 pages in all</span></span><br><span class="line">page_num=<span class="number">2261</span></span><br><span class="line">page=<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> page&lt;=page_num:</span><br><span class="line">    print(<span class="string">&#x27;Downloading &#123;&#125; page&#x27;</span>.format(page))</span><br><span class="line">    <span class="comment"># Must be 3 ~12.</span></span><br><span class="line">    <span class="keyword">for</span> tr_num <span class="keyword">in</span> range(<span class="number">3</span>,<span class="number">13</span>):</span><br><span class="line">        d_everypage=<span class="string">&#x27;//*[@id=&quot;datasource&quot;]/div/table/tr[&#x27;</span>+str(tr_num)+<span class="string">&#x27;]/td[9]/div/div/p[2]&#x27;</span></span><br><span class="line">        download=driver.find_element_by_xpath(d_everypage).click()</span><br><span class="line">        <span class="comment"># Give 20 seconds per download time</span></span><br><span class="line">        time.sleep(<span class="number">20</span>)</span><br><span class="line">    page += <span class="number">1</span></span><br><span class="line">    page_sr=driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;pager1&quot;]/div[2]/table/tr/td[7]/input&#x27;</span>)</span><br><span class="line">    page_sr.clear()</span><br><span class="line">    page_sr.send_keys(page)</span><br><span class="line">    page_sr.send_keys(Keys.RETURN)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>DataCollection</category>
      </categories>
  </entry>
  <entry>
    <title>Batch download Landsat data from USGS</title>
    <url>/2020/10/27/Batch-download-Landsat-data-from-USGS/</url>
    <content><![CDATA[<h1 id="Data-Source"><a href="#Data-Source" class="headerlink" title="Data Source"></a>Data Source</h1><p><a href="https://earthexplorer.usgs.gov/">https://earthexplorer.usgs.gov/</a></p>
 <div style="margin: 0 auto;overflow: hidden;">
 <img src="/2020/10/27/Batch-download-Landsat-data-from-USGS/USGS.png" alt>
 </div>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># Python version 3.X</span></span><br><span class="line"><span class="keyword">import</span> landsatxplore.api</span><br><span class="line"><span class="keyword">from</span> landsatxplore.earthexplorer <span class="keyword">import</span> EarthExplorer</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">request_Landsat</span>(<span class="params">username,password,product,bbox,start_date,end_date,cloud_max</span>):</span></span><br><span class="line">    api = landsatxplore.api.API(username, password)</span><br><span class="line">    scenes = api.search(</span><br><span class="line">        dataset=product,</span><br><span class="line">        <span class="comment"># latitude=lat,</span></span><br><span class="line">        <span class="comment"># longitude=lon,</span></span><br><span class="line">        bbox=bbox,</span><br><span class="line">        start_date=start_date,</span><br><span class="line">        end_date=end_date,</span><br><span class="line">        max_cloud_cover=cloud_max)</span><br><span class="line">    print(<span class="string">&#x27;&#123;&#125; data queried.&#x27;</span>.format(len(scenes)))</span><br><span class="line">    api.logout()</span><br><span class="line">    <span class="keyword">return</span> scenes</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_landsat</span>(<span class="params">username,password,Landsat_name,output_dir</span>):</span></span><br><span class="line">    Earth_Down = EarthExplorer(username, password)</span><br><span class="line">    <span class="keyword">for</span> scene <span class="keyword">in</span> Landsat_name:</span><br><span class="line">        ID = scene[<span class="string">&#x27;entityId&#x27;</span>]</span><br><span class="line">        print(<span class="string">&#x27;Downloading %s &#x27;</span>% ID)</span><br><span class="line">        Earth_Down.download(scene_id=ID, output_dir=output_dir)</span><br><span class="line">    Earth_Down.logout()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># Your USGS account</span></span><br><span class="line">    username = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    password = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># Select data according to sensor type</span></span><br><span class="line">    product = <span class="string">&#x27;LANDSAT_TM_C1&#x27;</span>    <span class="comment"># Landsat 4、5</span></span><br><span class="line">    <span class="comment"># product = &#x27;LANDSAT_ETM_C1&#x27;    # Landsat 7</span></span><br><span class="line">    <span class="comment"># product = &#x27;LANDSAT_8_C1&#x27;    # Landsat 8</span></span><br><span class="line">    <span class="comment"># lat =</span></span><br><span class="line">    <span class="comment"># lon =</span></span><br><span class="line">    <span class="comment"># The Image Coverage (xmin、ymin、xmax、ymax)</span></span><br><span class="line">    bbox = [<span class="number">34</span>, <span class="number">119</span>, <span class="number">35</span>, <span class="number">120</span>]</span><br><span class="line">    start_date=<span class="string">&#x27;1999-01-01&#x27;</span></span><br><span class="line">    end_date=<span class="string">&#x27;2000-01-01&#x27;</span></span><br><span class="line">    <span class="comment"># Maximum cloud coverage</span></span><br><span class="line">    cloud_max = <span class="number">10</span></span><br><span class="line">    <span class="comment"># Save path</span></span><br><span class="line">    output_dir = <span class="string">&#x27;E:\\LandsatImg\\&#x27;</span></span><br><span class="line">    Landsat_name = request_Landsat(username,password,product,bbox,start_date,end_date,cloud_max)</span><br><span class="line">    download_landsat(username,password,Landsat_name,output_dir)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>DataCollection</category>
      </categories>
  </entry>
  <entry>
    <title>Batch download Sentinel data from ESA Copernicus Data Centre</title>
    <url>/2020/10/27/Batch-download-Sentinel-data-from-ESA-Copernicus-Data-Centre/</url>
    <content><![CDATA[<h1 id="Data-Source"><a href="#Data-Source" class="headerlink" title="Data Source"></a>Data Source</h1><p><a href="https://scihub.copernicus.eu/dhus/#/home">https://scihub.copernicus.eu/dhus/#/home</a></p>
 <div style="margin: 0 auto;overflow: hidden;">
 <img src="/2020/10/27/Batch-download-Sentinel-data-from-ESA-Copernicus-Data-Centre/COAH.png" alt>
 </div>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> sentinelsat.sentinel <span class="keyword">import</span> SentinelAPI</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line"></span><br><span class="line"><span class="comment"># Your Copernicus Open Access Hub Account</span></span><br><span class="line"><span class="comment"># Register on https://scihub.copernicus.eu/dhus/#/self-registration</span></span><br><span class="line">name=<span class="string">&#x27;&#x27;</span></span><br><span class="line">password=<span class="string">&#x27;&#x27;</span></span><br><span class="line">api = SentinelAPI(name,password, <span class="string">&#x27;https://scihub.copernicus.eu/dhus/&#x27;</span></span><br><span class="line">xmin,ymin,xmax,ymax=<span class="number">120</span>,<span class="number">34</span>,<span class="number">121</span>,<span class="number">35</span></span><br><span class="line">roi=<span class="string">&quot;POLYGON((&quot;</span>+str(xmin)+<span class="string">&quot; &quot;</span>+str(ymin)+<span class="string">&quot;,&quot;</span>+str(xmax)+<span class="string">&quot; &quot;</span>+str(ymin)+<span class="string">&quot;,&quot;</span>+str(xmax)+<span class="string">&quot; &quot;</span>+str(ymax)+<span class="string">&quot;,&quot;</span>+str(xmin)+<span class="string">&quot; &quot;</span>+str(ymax)+<span class="string">&quot;,&quot;</span>+str(xmin)+<span class="string">&quot; &quot;</span>+str(ymin)+<span class="string">&quot;))&quot;</span></span><br><span class="line"><span class="comment"># roi = &#x27;POLYGON((DEFINE ROI))&#x27; # http://geojson.io/#map=10/42.4012/117.2488</span></span><br><span class="line"></span><br><span class="line">start_date = <span class="string">&#x27;20190524&#x27;</span></span><br><span class="line">end_date = <span class="string">&#x27;20190530&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># S1/2</span></span><br><span class="line">platformname=<span class="string">&#x27;Sentinel-2&#x27;</span></span><br><span class="line"><span class="comment"># S1：SLC(Single Look Complex)、GRD(Ground Range Detected)、OCN</span></span><br><span class="line"><span class="comment"># product_type = &#x27;SLC&#x27;</span></span><br><span class="line"><span class="comment"># S2：S2MSI1C、S2MSI2A(S2-L2A)、S2MSI2Ap</span></span><br><span class="line">product_type = <span class="string">&#x27;S2MSI2A&#x27;</span></span><br><span class="line"><span class="comment"># Min, Max percentage</span></span><br><span class="line">cloud_cover = (<span class="number">0</span>, <span class="number">50</span>)</span><br><span class="line"><span class="comment"># Img save path</span></span><br><span class="line">download_path=<span class="string">&quot;E:\\&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Ordered dictionary</span></span><br><span class="line">success_products = OrderedDict()</span><br><span class="line">products = OrderedDict()</span><br><span class="line"></span><br><span class="line">results  = api.query(area=roi,date=(start_date, end_date),platformname=platformname,producttype=product_type, cloudcoverpercentage=cloud_cover)</span><br><span class="line">products.update(results)</span><br><span class="line"></span><br><span class="line">total = len(products)</span><br><span class="line">print(<span class="string">&quot; &#123;&#125; data finded &quot;</span>.format(total))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_one</span>(<span class="params">api, product, product_info</span>):</span></span><br><span class="line">    <span class="comment"># download</span></span><br><span class="line">    api.download(product, directory_path=download_path)</span><br><span class="line">    <span class="comment"># save info</span></span><br><span class="line">    success_products[product] = product_info</span><br><span class="line">    print(<span class="string">&#x27;\t[success:] &#123;&#125;/&#123;&#125;&#x27;</span>.format(len(success_products), total))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Trigger offline product first</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="string">&quot;---Trigger offline product---&quot;</span>)</span><br><span class="line">    cnt = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> product <span class="keyword">in</span> products:</span><br><span class="line">        product_odata = api.get_product_odata(product)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> product_odata[<span class="string">&#x27;Online&#x27;</span>]:</span><br><span class="line">            print(<span class="string">&quot;Trigger offline data &#123;&#125;： &#123;&#125;&quot;</span>.format(cnt, product_odata[<span class="string">&#x27;date&#x27;</span>]))</span><br><span class="line">            <span class="comment"># Triggering retrieval from long term archive</span></span><br><span class="line">            api.download(product, download_path)</span><br><span class="line">            cnt += <span class="number">1</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">&quot;Sorry, requests for retrieval from LTA exceed user quota (No more than 20 times)&quot;</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Start downloading</span></span><br><span class="line">print(<span class="string">&quot;---Download Start---&quot;</span>)</span><br><span class="line"><span class="keyword">while</span> len(success_products)!=total:</span><br><span class="line">        <span class="keyword">for</span> product <span class="keyword">in</span> products:</span><br><span class="line">            product_odata = api.get_product_odata(product)</span><br><span class="line">            <span class="comment"># Online</span></span><br><span class="line">            <span class="keyword">if</span> product_odata[<span class="string">&#x27;Online&#x27;</span>]:</span><br><span class="line">                print(<span class="string">&#x27;Data online，can be downloaded：&#123;&#125; &#123;&#125;&#x27;</span>.format(product_odata[<span class="string">&#x27;date&#x27;</span>], product_odata[<span class="string">&#x27;title&#x27;</span>]) )</span><br><span class="line">                download_one(api, product, products[product])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">&quot;[Data offline，please wait：] &#123;&#125;&quot;</span>.format(product_odata[<span class="string">&#x27;date&#x27;</span>] ))</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>DataCollection</category>
      </categories>
  </entry>
  <entry>
    <title>China 1:1 million basic geographic database</title>
    <url>/2020/10/26/China-1-1-million-basic-geographic-database/</url>
    <content><![CDATA[<h1 id="Data-Source"><a href="#Data-Source" class="headerlink" title="Data Source"></a>Data Source</h1><p><a href="http://www.webmap.cn/main.do?method=index">http://www.webmap.cn/main.do?method=index</a></p>
<h1 id="Data-Preview"><a href="#Data-Preview" class="headerlink" title="Data Preview"></a>Data Preview</h1> <div style="margin: 0 auto;overflow: hidden;">
 <img src="/2020/10/26/China-1-1-million-basic-geographic-database/ChinaGDB.png" alt>
 </div>
 <div style="margin: 0 auto;overflow: hidden;">
 <img src="/2020/10/26/China-1-1-million-basic-geographic-database/DataPreview.png" alt>
 </div>

<h1 id="Download"><a href="#Download" class="headerlink" title="Download"></a>Download</h1><p>link：<a href="https://pan.baidu.com/s/14-RU7qBwqo-9IH1-9tq8hQ">https://pan.baidu.com/s/14-RU7qBwqo-9IH1-9tq8hQ</a><br>code：s2kt<br>size: 166MB</p>
]]></content>
      <categories>
        <category>Data</category>
      </categories>
  </entry>
  <entry>
    <title>Extract a single band from a multi-band image</title>
    <url>/2020/10/22/Extract-a-single-band-from-a-multi-band-image/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> arcpy</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extractSingleBand</span>(<span class="params">multiBandImgPath,singleBandSavePath</span>):</span></span><br><span class="line">    f_list = os.listdir(multiBandImgPath)</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> f_list:</span><br><span class="line">        <span class="keyword">if</span> os.path.splitext(file)[<span class="number">1</span>] == <span class="string">&quot;.tif&quot;</span>:</span><br><span class="line">            tif = str(multiBandImgPath) + <span class="string">&quot;\\&quot;</span> + str(file)</span><br><span class="line">            arcpy.env.workspace = tif</span><br><span class="line">            <span class="keyword">for</span> raster <span class="keyword">in</span> arcpy.ListRasters():</span><br><span class="line">                <span class="comment">#The name of band to extract</span></span><br><span class="line">                <span class="keyword">if</span> str(raster) == <span class="string">&quot;bandName&quot;</span>:</span><br><span class="line">                    bandrasteroutputname = singleBandSavePath+<span class="string">&quot;bandName&quot;</span> + file</span><br><span class="line">                    arcpy.CopyRaster_management(raster, bandrasteroutputname, <span class="string">&quot;&quot;</span>, <span class="number">-999</span>, <span class="number">-999</span>)</span><br><span class="line">    <span class="keyword">print</span>  <span class="string">&quot;done&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Raster</category>
      </categories>
  </entry>
  <entry>
    <title>F-test for trend analysis</title>
    <url>/2020/10/21/F-test-for-trend-analysis/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> arcpy</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> arcpy.sa <span class="keyword">import</span> *</span><br><span class="line">arcpy.CheckOutExtension(<span class="string">&quot;spatial&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">F_TestForTrendAnalysis</span>(<span class="params">dataFolder,resultSaveFolder</span>):</span></span><br><span class="line">    workSpace1 = dataFolder</span><br><span class="line">    arcpy.env.workspace = unicode(workSpace1, <span class="string">&quot;utf8&quot;</span>)</span><br><span class="line">    ys = arcpy.ListRasters(<span class="string">&quot;1*&quot;</span>, <span class="string">&quot;tif&quot;</span>)</span><br><span class="line">    <span class="comment"># Generate time series layers</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> ys:</span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">        out = dataFolder+<span class="string">&quot;\\&quot;</span></span><br><span class="line">        <span class="keyword">if</span> i &lt; <span class="number">10</span>:</span><br><span class="line">            out1 = unicode(out, <span class="string">&quot;utf8&quot;</span>) + <span class="string">&quot;20&quot;</span> + str(i) + <span class="string">&quot;.tif&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            out1 = unicode(out, <span class="string">&quot;utf8&quot;</span>) + <span class="string">&quot;2&quot;</span> + str(i) + <span class="string">&quot;.tif&quot;</span></span><br><span class="line">        outx = Con(<span class="number">1</span>, i, y)</span><br><span class="line">        outx.save(out1)</span><br><span class="line">    <span class="comment"># Read the time series layer</span></span><br><span class="line">    arcpy.env.workspace = unicode(workSpace1, <span class="string">&quot;utf8&quot;</span>)</span><br><span class="line">    xs = arcpy.ListRasters(<span class="string">&quot;2*&quot;</span>, <span class="string">&quot;tif&quot;</span>)</span><br><span class="line">    <span class="comment"># Calculate</span></span><br><span class="line">    x_ = CellStatistics(xs, <span class="string">&quot;MEAN&quot;</span>, <span class="string">&quot;DATA&quot;</span>)</span><br><span class="line">    y_ = CellStatistics(ys, <span class="string">&quot;MEAN&quot;</span>, <span class="string">&quot;DATA&quot;</span>)</span><br><span class="line">    n = len(xs)</span><br><span class="line">    xy = <span class="number">0</span></span><br><span class="line">    x2 = <span class="number">0</span></span><br><span class="line">    St = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(xs)):</span><br><span class="line">        St = (Raster(ys[i]) - y_) ** <span class="number">2</span> + St</span><br><span class="line">        xy = Raster(xs[i]) * Raster(ys[i]) + xy</span><br><span class="line">        x2 = Raster(xs[i]) ** <span class="number">2</span> + x2</span><br><span class="line">    k = (xy - n * x_ * y_) / (x2 - n * (x_ ** <span class="number">2</span>))</span><br><span class="line">    outpath1 = resultSaveFolder+<span class="string">&quot;\\&quot;</span></span><br><span class="line">    sty1 = <span class="string">&quot;Trend&quot;</span> + <span class="string">&quot;.tif&quot;</span></span><br><span class="line">    out1 = outpath1 + sty1</span><br><span class="line">    k.save(out1)</span><br><span class="line">    <span class="comment"># F-test</span></span><br><span class="line">    Sr = (x2 - n * (x_ ** <span class="number">2</span>)) * (k ** <span class="number">2</span>)</span><br><span class="line">    Se = St - Sr</span><br><span class="line">    F = (n - <span class="number">2</span>) * Sr / Se</span><br><span class="line">    outpath2 = resultSaveFolder+<span class="string">&quot;\\&quot;</span></span><br><span class="line">    sty2 = <span class="string">&quot;F&quot;</span> + <span class="string">&quot;.tif&quot;</span></span><br><span class="line">    out2 = outpath2 + sty2</span><br><span class="line">    F.save(out2)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>DataAnalysis</category>
      </categories>
  </entry>
  <entry>
    <title>GDB convert to shp</title>
    <url>/2020/10/19/GDB%20convert%20to%20shp/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> arcpy</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span>  <span class="title">GDBConvertToShp</span>(<span class="params">GDBfolder ,SHPfolder</span>):</span></span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(GDBfolder):</span><br><span class="line">        <span class="keyword">for</span> d <span class="keyword">in</span> dirs:</span><br><span class="line">            path= root+<span class="string">&quot;\\&quot;</span>+d</span><br><span class="line">            <span class="keyword">if</span> path[<span class="number">-4</span>:]==<span class="string">&quot;.gdb&quot;</span>:</span><br><span class="line">                name=path.split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>].split(<span class="string">&quot;\\&quot;</span>)[<span class="number">-1</span>]</span><br><span class="line">                arcpy.env.workspace =path</span><br><span class="line">                gdbshp=arcpy.ListFeatureClasses()</span><br><span class="line">                <span class="keyword">for</span> fc <span class="keyword">in</span> gdbshp:</span><br><span class="line">                    <span class="comment"># the name of the feature in GDB you want to convert to shpfile</span></span><br><span class="line">                    <span class="keyword">if</span> str(fc)==<span class="string">&quot;XXXX&quot;</span>:</span><br><span class="line">                        arcpy.FeatureClassToFeatureClass_conversion(fc, SHPfolder,name+str(fc)+<span class="string">&quot;.shp&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>DataConverion</category>
      </categories>
  </entry>
  <entry>
    <title>Get sum of value from raster file</title>
    <url>/2020/10/16/Get%20sum%20of%20value%20from%20raster%20file/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> arcpy</span><br><span class="line"><span class="keyword">from</span> arcpy.sa <span class="keyword">import</span> *</span><br><span class="line">arcpy.CheckOutExtension(<span class="string">&quot;Spatial&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getValueSum</span>(<span class="params">rasterPath</span>):</span></span><br><span class="line">    raster=arcpy.Raster(rasterPath)</span><br><span class="line">    raster2 = SetNull(raster == <span class="number">0</span>,raster)</span><br><span class="line">    sum=<span class="number">0</span></span><br><span class="line">    rstArray = arcpy.RasterToNumPyArray(raster2)</span><br><span class="line">    rows, cols = rstArray.shape</span><br><span class="line">    <span class="keyword">for</span> rowNum <span class="keyword">in</span> xrange(rows):</span><br><span class="line">        <span class="keyword">for</span> colNum <span class="keyword">in</span> xrange(cols):</span><br><span class="line">            s=rstArray.item(rowNum, colNum)</span><br><span class="line">            sum=sum+s</span><br><span class="line">    <span class="keyword">return</span> sum</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Raster</category>
      </categories>
  </entry>
  <entry>
    <title>Get sum or mean from rasters</title>
    <url>/2020/10/21/Get%20sum%20or%20mean%20from%20rasters/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> arcpy</span><br><span class="line"><span class="keyword">from</span> arcpy <span class="keyword">import</span> env</span><br><span class="line"><span class="keyword">from</span> arcpy.sa <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">arcpy.CheckOutExtension(<span class="string">&quot;spatial&quot;</span>)</span><br><span class="line">env.overwriteOutput= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># get Sum</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSumOfRasters</span>(<span class="params">rasterPath,resultSavePath</span>):</span></span><br><span class="line">    arcpy.env.workspace = rasterPath</span><br><span class="line">    rasterlist = arcpy.ListRasters(<span class="string">&quot;*&quot;</span>, <span class="string">&quot;TIF&quot;</span>)</span><br><span class="line">    baseraster=rasterlist[<span class="number">0</span>]</span><br><span class="line">    baseraster2= Con(IsNull(baseraster),<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> raster <span class="keyword">in</span> rasterlist:</span><br><span class="line">        baseraster2 = baseraster2 + raster</span><br><span class="line">    baseraster2.save(resultSavePath)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&quot;finish!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># get Mean</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getMeanOfRasters</span>(<span class="params">rasterPath,resultSavePath</span>):</span></span><br><span class="line">    arcpy.env.workspace = rasterPath</span><br><span class="line">    rasterlist = arcpy.ListRasters(<span class="string">&quot;*&quot;</span>, <span class="string">&quot;TIF&quot;</span>)</span><br><span class="line">    baseraster=rasterlist[<span class="number">0</span>]</span><br><span class="line">    baseraster2= Con(IsNull(baseraster),<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> raster <span class="keyword">in</span> rasterlist:</span><br><span class="line">        baseraster2 = baseraster2 + raster</span><br><span class="line">    meanraster=baseraster2/len(rasterlist)</span><br><span class="line">    meanraster.save(resultSavePath)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&quot;finish!&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Raster</category>
      </categories>
  </entry>
  <entry>
    <title>Get the quantile of raster image</title>
    <url>/2022/07/27/Get%20the%20quantile%20of%20raster%20image/</url>
    <content><![CDATA[<p>```python</p>
<h1 id="coding-utf-8"><a href="#coding-utf-8" class="headerlink" title="-- coding: utf-8 --"></a>-<em>- coding: utf-8 -</em>-</h1><p>import tifffile as tiff<br>import math<br>import numpy<br>from itertools import chain<br>img = tiff.imread(‘tiffilePath’)<br>listImg = list(chain.from_iterable(img))</p>
<h1 id="Filter-out-negative-numbers-optional"><a href="#Filter-out-negative-numbers-optional" class="headerlink" title="Filter out negative numbers (optional)"></a>Filter out negative numbers (optional)</h1><p>x = numpy.array([num for num in listImg if num &gt;= 0])<br>def percentile(data, perc: int):<br>    size = len(data)<br>    return sorted(data)[int(math.ceil((size * perc) / 100)) - 1]</p>
<h1 id="5th-percentile"><a href="#5th-percentile" class="headerlink" title="5th percentile"></a>5th percentile</h1><p>print(“5th percentile：”+str(percentile(x, 5)))</p>
<h1 id="95th-percentile"><a href="#95th-percentile" class="headerlink" title="95th percentile"></a>95th percentile</h1><p>print(“95th percentile：”+str(percentile(x, 95)))</p>
]]></content>
      <categories>
        <category>DataProperties</category>
      </categories>
  </entry>
  <entry>
    <title>Get POI data from Baidu Map</title>
    <url>/2020/10/25/Get-POI-data-from-Baidu-Map/</url>
    <content><![CDATA[<h3 id="Baidu-Map-POI-Industry-Classification"><a href="#Baidu-Map-POI-Industry-Classification" class="headerlink" title="Baidu Map POI Industry Classification"></a>Baidu Map POI Industry Classification</h3><h4 id="http-lbsyun-baidu-com-index-php-title-lbscloud-poitags"><a href="#http-lbsyun-baidu-com-index-php-title-lbscloud-poitags" class="headerlink" title="http://lbsyun.baidu.com/index.php?title=lbscloud/poitags"></a><a href="http://lbsyun.baidu.com/index.php?title=lbscloud/poitags">http://lbsyun.baidu.com/index.php?title=lbscloud/poitags</a></h4> <div style="margin: 0 auto;overflow: hidden;">
 <img src="/2020/10/25/Get-POI-data-from-Baidu-Map/POIClass.png" alt>
 </div>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getPOIFromBaiduMap</span>(<span class="params">lat_1,lon_1,lat_2,lon_2,las,keyword,excelSaveFolder</span>):</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="comment"># Your BaiduMap API Key</span></span><br><span class="line">    ak = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    keynew = str(urllib.parse.quote(keyword))</span><br><span class="line">    push = excelSaveFolder+<span class="string">&#x27;\\&#x27;</span>+keyword+<span class="string">&#x27;.xls&#x27;</span></span><br><span class="line">    f = open(push, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">    lat_count = int((lat_2 - lat_1) / las + <span class="number">1</span>)</span><br><span class="line">    lon_count = int((lon_2 - lon_1) / las + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> lat_c <span class="keyword">in</span> range(<span class="number">0</span>, lat_count):</span><br><span class="line">        lat_b1 = lat_1 + las * lat_c</span><br><span class="line">        <span class="keyword">for</span> lon_c <span class="keyword">in</span> range(<span class="number">0</span>, lon_count):</span><br><span class="line">            lon_b1 = lon_1 + las * lon_c</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">20</span>):</span><br><span class="line">                page_num = str(i)</span><br><span class="line">                url = <span class="string">r&#x27;http://api.map.baidu.com/place/v2/search?query=&#x27;</span> + keynew + <span class="string">&#x27;&amp;bounds=&#x27;</span> + str(lat_b1) + <span class="string">&#x27;,&#x27;</span> + str(lon_b1) + <span class="string">&#x27;,&#x27;</span> + str(lat_b1 + las) + <span class="string">&#x27;,&#x27;</span> + str(lon_b1 + las) + <span class="string">&#x27;&amp;page_size=20&amp;page_num=&#x27;</span> + str(page_num) + <span class="string">&#x27;&amp;output=json&amp;ak=&#x27;</span> + ak</span><br><span class="line">                count=count+<span class="number">1</span></span><br><span class="line">                print(str(count))</span><br><span class="line">                response = urllib.request.urlopen(url)</span><br><span class="line">                data = json.load(response)</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    <span class="keyword">for</span> item <span class="keyword">in</span> data[<span class="string">&#x27;results&#x27;</span>]:</span><br><span class="line">                        jname = item[<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">                        print(jname)</span><br><span class="line">                        jlat = item[<span class="string">&#x27;location&#x27;</span>][<span class="string">&#x27;lat&#x27;</span>]</span><br><span class="line">                        jlon = item[<span class="string">&#x27;location&#x27;</span>][<span class="string">&#x27;lng&#x27;</span>]</span><br><span class="line">                        jadd = item[<span class="string">&#x27;address&#x27;</span>]</span><br><span class="line">                        j_str = jname + <span class="string">&#x27;,&#x27;</span> + str(jlat) + <span class="string">&#x27;,&#x27;</span> + str(jlon) + <span class="string">&#x27;,&#x27;</span> + jadd + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">                        f.write(j_str)      </span><br><span class="line">                        print(j_str)</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    print(<span class="string">&quot;Error&quot;</span>)</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Example</span></span><br><span class="line"><span class="comment"># POI category</span></span><br><span class="line">classArray=</span><br><span class="line">[<span class="string">&#x27;中餐厅&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;外国餐厅&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;小吃快餐店&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;蛋糕甜品店&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;咖啡厅&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;茶座&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;酒吧&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;星级酒店&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;快捷酒店&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;公寓式酒店&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;民宿&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;购物中心&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;百货商场&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;超市&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;便利店&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;家居建材&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;家电数码&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;商铺&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;市场&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;通讯营业厅&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;邮局&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;物流公司&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;售票处&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;洗衣店&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;图文快印店&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;照相馆&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;房产中介机构&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;公用事业&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;维修点&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;家政服务&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;殡葬服务&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;彩票销售点&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;宠物服务&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;报刊亭&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;公共厕所&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;步骑行专用道驿站&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;美容&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;美发&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;美甲&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;美体&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;公园&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;动物园&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;植物园&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;游乐园&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;博物馆&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;水族馆&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;海滨浴场&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;文物古迹&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;教堂&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;风景区&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;景点&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;寺庙&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;度假村&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;农家院&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;电影院&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;ktv&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;剧院&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;歌舞厅&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;网吧&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;游戏场所&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;洗浴按摩&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;休闲广场&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;体育场馆&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;极限运动场所&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;健身中心&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;高等院校&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;中学&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;小学&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;幼儿园&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;成人教育&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;亲子教育&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;特殊教育学校&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;留学中介机构&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;科研机构&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;培训机构&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;图书馆&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;科技馆&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;新闻出版&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;广播电视&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;艺术团体&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;美术馆&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;展览馆&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;文化宫&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;综合医院&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;专科医院&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;诊所&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;药店&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;体检机构&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;疗养院&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;急救中心&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;疾控中心&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;医疗器械&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;医疗保健&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;汽车销售&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;汽车维修&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;汽车美容&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;汽车配件&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;汽车租赁&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;汽车检测场&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;飞机场&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;火车站&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;地铁站&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;地铁线路&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;长途汽车站&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;公交车站&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;公交线路&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;港口&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;停车场&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;加油加气站&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;服务区&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;收费站&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;桥&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;充电站&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;路侧停车位&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;普通停车位&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;接送点&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;银行&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;ATM&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;信用社&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;投资理财&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;典当行&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;写字楼&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;住宅区&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;宿舍&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;内部楼栋&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;公司&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;园区&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;农林园艺&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;厂矿&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;中央机构&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;各级政府&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;行政单位&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;公检法机构&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;涉外机构&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;党派团体&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;福利机构&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;政治教育机构&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;社会团体&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;民主党派&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;居民委员会&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;高速公路出口&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;高速公路入口&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;机场出口&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;机场入口&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;车站出口&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;车站入口&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;门&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;停车场出入口&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;自行车高速出口&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;自行车高速入口&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;自行车高速出入口&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;岛屿&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;山峰&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;水系&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;省&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;省级城市&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;地级市&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;区县&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;商圈&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;乡镇&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;村庄&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Large rectangular coordinate</span></span><br><span class="line">lat_1=<span class="number">21.502705</span></span><br><span class="line">lon_1=<span class="number">110.321145</span></span><br><span class="line">lat_2=<span class="number">25.519951</span></span><br><span class="line">lon_2=<span class="number">116.220296</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Step</span></span><br><span class="line">las=<span class="number">0.2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Get 中餐厅 POI</span></span><br><span class="line">getPOIFromBaiduMap(lat_1, lon_1, lat_2, lon_2, las, classArray[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Get all categories of POI</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(classArray)):</span><br><span class="line">    print(<span class="string">&quot;-------------------Collecting&quot;</span>+classArray[i]+<span class="string">&quot;!---------------------------&quot;</span>)</span><br><span class="line">    getPOIFromBaiduMap(lat_1, lon_1, lat_2, lon_2, las, classArray[i])</span><br><span class="line">    print(<span class="string">&quot;-------------------&quot;</span> + classArray[i] + <span class="string">&quot;Collected-------------------------&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>DataCollection</category>
      </categories>
  </entry>
  <entry>
    <title>Get extent of raster or shp</title>
    <url>/2020/10/22/Get-extent-of-raster-or-shp/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> arcpy</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> arcpy <span class="keyword">import</span> env</span><br><span class="line">arcpy.CheckOutExtension(<span class="string">&quot;Spatial&quot;</span>)</span><br><span class="line">env.overwriteOutput=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getExtentOfRasterOrShp</span>(<span class="params">filePath</span>):</span></span><br><span class="line">    folder_path, file_name = os.path.split(filePath)</span><br><span class="line">    arcpy.env.workspace =folder_path</span><br><span class="line">    ext=file_name[<span class="number">-4</span>:]</span><br><span class="line">    <span class="keyword">if</span> ext==<span class="string">&quot;.tif&quot;</span>:</span><br><span class="line">        extent=arcpy.Raster(filePath).extent</span><br><span class="line">        <span class="keyword">return</span> str(extent.XMin)+<span class="string">&quot; &quot;</span>+str(extent.YMin)+<span class="string">&quot; &quot;</span>+str(extent.XMax)+<span class="string">&quot; &quot;</span>+str(extent.YMax)</span><br><span class="line">    <span class="keyword">elif</span> ext==<span class="string">&quot;.shp&quot;</span>:</span><br><span class="line">        xmin=[]</span><br><span class="line">        xmax=[]</span><br><span class="line">        ymin=[]</span><br><span class="line">        ymax=[]</span><br><span class="line">        <span class="keyword">with</span> arcpy.da.SearchCursor(filePath, <span class="string">&#x27;SHAPE@&#x27;</span>) <span class="keyword">as</span> cursor:</span><br><span class="line">            <span class="keyword">for</span> row <span class="keyword">in</span> cursor:</span><br><span class="line">                result = row[<span class="number">0</span>].extent</span><br><span class="line">                xmin.append(result.XMin)</span><br><span class="line">                xmax.append(result.XMax)</span><br><span class="line">                ymin.append( result.YMin)</span><br><span class="line">                ymax.append(result.YMax)</span><br><span class="line">        xmin.sort()</span><br><span class="line">        ymin.sort()</span><br><span class="line">        xmax.sort(reverse=<span class="literal">True</span>)</span><br><span class="line">        ymax.sort(reverse=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> str(xmin[<span class="number">0</span>])+<span class="string">&quot; &quot;</span>+str(ymin[<span class="number">0</span>])+<span class="string">&quot; &quot;</span>+str(xmax[<span class="number">0</span>])+<span class="string">&quot; &quot;</span>+str(ymax[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>DataProperties</category>
      </categories>
  </entry>
  <entry>
    <title>Get the location of point in grid</title>
    <url>/2020/10/23/Get-the-location-of-point-in-grid/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> arcpy</span><br><span class="line"><span class="keyword">from</span> arcpy <span class="keyword">import</span> env</span><br><span class="line"><span class="keyword">from</span> arcpy.sa <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">arcpy.CheckOutExtension(<span class="string">&quot;Spatial&quot;</span>)</span><br><span class="line">env.overwriteOutput = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getLocationOfPointInGrid</span>(<span class="params">rasterPath,pointPath,worksapcePath</span>):</span></span><br><span class="line">    env.workspace = worksapcePath</span><br><span class="line">    cellXSzie = arcpy.GetRasterProperties_management(rasterPath, <span class="string">&quot;CELLSIZEX&quot;</span>)</span><br><span class="line">    cellYSzie = arcpy.GetRasterProperties_management(rasterPath, <span class="string">&quot;CELLSIZEY&quot;</span>)</span><br><span class="line">    leftPosition = arcpy.GetRasterProperties_management(rasterPath, <span class="string">&quot;LEFT&quot;</span>)</span><br><span class="line">    bottomPosition = arcpy.GetRasterProperties_management(rasterPath, <span class="string">&quot;BOTTOM&quot;</span>)</span><br><span class="line">    <span class="comment"># Converting raster to array</span></span><br><span class="line">    rstArray = arcpy.RasterToNumPyArray(arcpy.Raster(rasterPath))</span><br><span class="line">    <span class="comment"># Number of rows and columns of raster</span></span><br><span class="line">    rows, cols = rstArray.shape</span><br><span class="line">    <span class="comment"># Create row and column number grid</span></span><br><span class="line">    rowcell = &#123;&#125;</span><br><span class="line">    colcell = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> rowNum <span class="keyword">in</span> xrange(rows):</span><br><span class="line">        <span class="keyword">for</span> colNum <span class="keyword">in</span> xrange(cols):</span><br><span class="line">            rowcell[(rowNum, colNum)] = [rowNum]</span><br><span class="line">            colcell[(rowNum, colNum)] = [colNum]</span><br><span class="line">    <span class="keyword">for</span> rowNum <span class="keyword">in</span> xrange(rows):</span><br><span class="line">        <span class="keyword">for</span> colNum <span class="keyword">in</span> xrange(cols):</span><br><span class="line">            rstArray[(rowNum, colNum)] = rowcell[(rowNum, colNum)][<span class="number">0</span>]</span><br><span class="line">    result = arcpy.NumPyArrayToRaster(rstArray, arcpy.Point(leftPosition[<span class="number">0</span>], bottomPosition[<span class="number">0</span>]), float(cellXSzie[<span class="number">0</span>]),float(cellYSzie[<span class="number">0</span>]))</span><br><span class="line">    result.save(<span class="string">&quot;row.tif&quot;</span>)</span><br><span class="line">    dsc = arcpy.Describe(pointPath)</span><br><span class="line">    coord_sys = dsc.spatialReference</span><br><span class="line">    arcpy.DefineProjection_management(<span class="string">&quot;row.tif&quot;</span>, coord_sys)</span><br><span class="line">    <span class="keyword">for</span> rowNum <span class="keyword">in</span> xrange(rows):</span><br><span class="line">        <span class="keyword">for</span> colNum <span class="keyword">in</span> xrange(cols):</span><br><span class="line">            rstArray[(rowNum, colNum)] = colcell[(rowNum, colNum)][<span class="number">0</span>]</span><br><span class="line">    result = arcpy.NumPyArrayToRaster(rstArray, arcpy.Point(leftPosition[<span class="number">0</span>], bottomPosition[<span class="number">0</span>]), float(cellXSzie[<span class="number">0</span>]),float(cellYSzie[<span class="number">0</span>]))</span><br><span class="line">    result.save(<span class="string">&quot;col.tif&quot;</span>)</span><br><span class="line">    dsc = arcpy.Describe(pointPath)</span><br><span class="line">    coord_sys = dsc.spatialReference</span><br><span class="line">    arcpy.DefineProjection_management(<span class="string">&quot;col.tif&quot;</span>, coord_sys)</span><br><span class="line">    <span class="comment"># Get the row and column of the point</span></span><br><span class="line">    inPointFeatures = pointPath</span><br><span class="line">    inRasterList = [[<span class="string">&quot;row.tif&quot;</span>, <span class="string">&quot;row&quot;</span>], [<span class="string">&quot;col.tif&quot;</span>, <span class="string">&quot;col&quot;</span>]]</span><br><span class="line">    <span class="comment"># Execute ExtractValuesTo Points</span></span><br><span class="line">    ExtractMultiValuesToPoints(inPointFeatures, inRasterList, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    cursor = arcpy.SearchCursor(inPointFeatures)</span><br><span class="line">    rowN = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    colN = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> rowcol <span class="keyword">in</span> cursor:</span><br><span class="line">        rowN = int(rowcol.row)</span><br><span class="line">        colN = int(rowcol.col)</span><br><span class="line">    <span class="keyword">return</span> [rowN, colN]</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Raster</category>
      </categories>
  </entry>
  <entry>
    <title>Get the water depth and volume of flood inundation by water level</title>
    <url>/2020/10/28/Get-the-water-depth-and-volume-of-flood-inundation-by-water-level/</url>
    <content><![CDATA[ <div style="margin: 0 auto;overflow: hidden;">
 <img src="/2020/10/28/Get-the-water-depth-and-volume-of-flood-inundation-by-water-level/WaterDepth.png" alt>
 </div>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> arcpy</span><br><span class="line"><span class="keyword">from</span> arcpy <span class="keyword">import</span> env</span><br><span class="line"><span class="keyword">from</span> arcpy.sa <span class="keyword">import</span> *</span><br><span class="line">arcpy.CheckOutExtension(<span class="string">&quot;Spatial&quot;</span>)</span><br><span class="line"><span class="comment"># Workspace</span></span><br><span class="line">env.workspace = <span class="string">&quot;&quot;</span></span><br><span class="line">env.overwriteOutput = <span class="literal">True</span></span><br><span class="line"><span class="comment"># Dem data path</span></span><br><span class="line">dem=<span class="string">&quot;XXX\\xx.tif&quot;</span></span><br><span class="line">cellXSzie = float(arcpy.GetRasterProperties_management(dem, <span class="string">&quot;CELLSIZEX&quot;</span>)[<span class="number">0</span>])</span><br><span class="line">cellYSzie = float(arcpy.GetRasterProperties_management(dem, <span class="string">&quot;CELLSIZEY&quot;</span>)[<span class="number">0</span>])</span><br><span class="line">maxdem=float(arcpy.GetRasterProperties_management(dem,<span class="string">&quot;MAXIMUM&quot;</span>)[<span class="number">0</span>])</span><br><span class="line">mindem=float(arcpy.GetRasterProperties_management(dem,<span class="string">&quot;MINIMUM&quot;</span>)[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getValueSum</span>(<span class="params">raster</span>):</span></span><br><span class="line">    sum=<span class="number">0</span></span><br><span class="line">    rstArray = arcpy.RasterToNumPyArray(raster)</span><br><span class="line">    rows, cols = rstArray.shape</span><br><span class="line">    <span class="keyword">for</span> rowNum <span class="keyword">in</span> xrange(rows):</span><br><span class="line">        <span class="keyword">for</span> colNum <span class="keyword">in</span> xrange(cols):</span><br><span class="line">            s=rstArray.item(rowNum, colNum)</span><br><span class="line">            sum=sum+s</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line"></span><br><span class="line"><span class="comment"># Calculation of the volume and extent of inundation based on water levels</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getVandRaster</span>(<span class="params">cellxsize,cellysize,h,V_threshold</span>):</span></span><br><span class="line">    inRaster = Raster(dem)</span><br><span class="line">    <span class="comment"># Water depth raster</span></span><br><span class="line">    deepRaster = Con(inRaster&lt;=h, h-inRaster, <span class="number">0</span>)</span><br><span class="line">    deepRaster2 = SetNull(deepRaster == <span class="number">0</span>,deepRaster)</span><br><span class="line">    <span class="comment"># Volume of water</span></span><br><span class="line">    Vraster=deepRaster*cellxsize*cellysize</span><br><span class="line">    Vraster2=Con(IsNull(Vraster),<span class="number">0</span>,Vraster)</span><br><span class="line">    <span class="comment"># Sum</span></span><br><span class="line">    V=getValueSum(Vraster2)</span><br><span class="line">    <span class="comment"># Threshold of volume</span></span><br><span class="line">    <span class="keyword">if</span> V&gt;=V_threshold:</span><br><span class="line">        deepRaster2.save(<span class="string">&quot;Level&quot;</span>+str(h)+<span class="string">&quot;m_Volume&quot;</span>+str(V)+<span class="string">&quot;m3.tif&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">h=mindem</span><br><span class="line">step=<span class="number">0.1</span></span><br><span class="line"><span class="keyword">while</span> h&lt;maxdem:</span><br><span class="line">    <span class="keyword">if</span> getVandRaster(cellXSzie,cellYSzie,h)==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        h=h+step</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>DataAnalysis</category>
      </categories>
  </entry>
  <entry>
    <title>Get the water flow path based on DEM</title>
    <url>/2020/10/24/Get-the-water-flow-path-based-on-DEM/</url>
    <content><![CDATA[ <div style="margin: 0 auto;overflow: hidden;">
 <img src="/2020/10/24/Get-the-water-flow-path-based-on-DEM/waterPath.png" alt>
 </div>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> arcpy</span><br><span class="line"></span><br><span class="line"><span class="comment"># The path of the DEM</span></span><br><span class="line">demPath=<span class="string">&quot;&quot;</span></span><br><span class="line">pathList = []</span><br><span class="line">elevationCell = &#123;&#125;</span><br><span class="line">cellXSzie = arcpy.GetRasterProperties_management(demPath, <span class="string">&quot;CELLSIZEX&quot;</span>)</span><br><span class="line">cellYSzie = arcpy.GetRasterProperties_management(demPath, <span class="string">&quot;CELLSIZEY&quot;</span>)</span><br><span class="line">leftPosition = arcpy.GetRasterProperties_management(demPath, <span class="string">&quot;LEFT&quot;</span>)</span><br><span class="line">topPosition = arcpy.GetRasterProperties_management(demPath, <span class="string">&quot;TOP&quot;</span>)</span><br><span class="line">bottomPosition = arcpy.GetRasterProperties_management(demPath, <span class="string">&quot;BOTTOM&quot;</span>)</span><br><span class="line"><span class="comment"># Converting raster to array</span></span><br><span class="line">rstArray = arcpy.RasterToNumPyArray(arcpy.Raster(demPath))</span><br><span class="line"><span class="comment"># Number of rows and columns of raster</span></span><br><span class="line">elevationCell = &#123;&#125;</span><br><span class="line">rows, cols = rstArray.shape</span><br><span class="line"><span class="keyword">for</span> rowNum <span class="keyword">in</span> xrange(rows):</span><br><span class="line">    <span class="keyword">for</span> colNum <span class="keyword">in</span> xrange(cols):</span><br><span class="line">        <span class="comment"># Set the elevation raster pixel, initialized as not flooded</span></span><br><span class="line">        elevationCell[(rowNum, colNum)] = [rowNum, colNum, rstArray.item(rowNum, colNum), <span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getDirectionOfWaterFlow</span>(<span class="params">rowNumber,colNumber,elevationCell</span>):</span></span><br><span class="line">    cell8list = []</span><br><span class="line">    <span class="keyword">for</span> rowi <span class="keyword">in</span> range(rowNumber - <span class="number">1</span>, rowNumber + <span class="number">2</span>):</span><br><span class="line">        <span class="keyword">for</span> coli <span class="keyword">in</span> range(colNumber - <span class="number">1</span>, colNumber + <span class="number">2</span>):</span><br><span class="line">            <span class="comment"># No out of bounds</span></span><br><span class="line">            <span class="keyword">if</span> (rowi &lt; rows <span class="keyword">and</span> coli &lt; cols <span class="keyword">and</span> coli &gt;= <span class="number">0</span> <span class="keyword">and</span> rowi &gt;= <span class="number">0</span> ):</span><br><span class="line">                <span class="comment"># Exclude oneself</span></span><br><span class="line">                <span class="keyword">if</span>(rowi != rowNumber <span class="keyword">or</span> coli !=colNumber):</span><br><span class="line">                    <span class="comment"># Exclude the already flooded</span></span><br><span class="line">                    <span class="keyword">if</span>  elevationCell[rowi, coli][<span class="number">3</span>] == <span class="number">-1</span>:</span><br><span class="line">                        <span class="comment"># Get elevation</span></span><br><span class="line">                        elevationcell = elevationCell[rowi, coli]</span><br><span class="line">                        cell8list.append(elevationcell)</span><br><span class="line">    <span class="keyword">if</span> len(cell8list)!=<span class="number">0</span>:</span><br><span class="line">        cell8list.sort(key=<span class="keyword">lambda</span> x: (x[<span class="number">2</span>]), reverse=<span class="literal">False</span>)</span><br><span class="line">        nercelllist = cell8list</span><br><span class="line">        <span class="comment"># Get the lowest elevation grid</span></span><br><span class="line">        mincell=nercelllist[<span class="number">0</span>]</span><br><span class="line">        mincell_ele = nercelllist[<span class="number">0</span>][<span class="number">2</span>]</span><br><span class="line">        selfcell_ele = elevationCell[rowNum, colNum][<span class="number">2</span>]</span><br><span class="line">        <span class="comment"># whether it can find a lower grid or not</span></span><br><span class="line">        <span class="keyword">if</span> mincell_ele &lt;= selfcell_ele:</span><br><span class="line">            depth = <span class="number">0</span></span><br><span class="line">            <span class="comment"># Set to Flooded</span></span><br><span class="line">            elevationCell[rowNum, colNumber][<span class="number">3</span>] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            depth = mincell_ele - selfcell_ele</span><br><span class="line">            <span class="comment"># Set to Flooded</span></span><br><span class="line">            elevationCell[rowNumber, colNumber][<span class="number">3</span>] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> mincell, depth</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getWaterFlowPath</span>(<span class="params">rowNumber,colNumber,elevationCell</span>):</span></span><br><span class="line">    <span class="keyword">if</span> getDirectionOfWaterFlow(rowNumber,colNumber,elevationCell)!=<span class="literal">None</span>:</span><br><span class="line">        mincell, depth=getDirectionOfWaterFlow(rowNumber,colNumber,elevationCell)</span><br><span class="line">        r=mincell[<span class="number">0</span>]</span><br><span class="line">        c=mincell[<span class="number">1</span>]</span><br><span class="line">        pathList.append(mincell)</span><br><span class="line">        getWaterFlowPath(r,c,elevationCell)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> pathList</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getWaterFlowPathRaster</span>(<span class="params">pointPath,pathList,waterFlowPathRasterSaveName</span>):</span></span><br><span class="line">    <span class="comment"># Set the flooded order</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(pathList)):</span><br><span class="line">        r = pathList[i][<span class="number">0</span>]</span><br><span class="line">        c = pathList[i][<span class="number">1</span>]</span><br><span class="line">        elevationCell[(r, c)][<span class="number">3</span>] = i</span><br><span class="line">    <span class="keyword">for</span> rowNum <span class="keyword">in</span> xrange(rows):</span><br><span class="line">                <span class="keyword">for</span> colNum <span class="keyword">in</span> xrange(cols):</span><br><span class="line">                    rstArray[(rowNum, colNum)] = elevationCell[(rowNum, colNum)][<span class="number">3</span>]</span><br><span class="line">    result = arcpy.NumPyArrayToRaster(rstArray, arcpy.Point(leftPosition[<span class="number">0</span>], bottomPosition[<span class="number">0</span>]), float(cellXSzie[<span class="number">0</span>]), float(cellYSzie[<span class="number">0</span>]))</span><br><span class="line">    result.save(waterFlowPathRasterSaveName)</span><br><span class="line">    <span class="comment"># Save the raster</span></span><br><span class="line">    dsc = arcpy.Describe(pointPath)</span><br><span class="line">    coord_sys = dsc.spatialReference</span><br><span class="line">    arcpy.DefineProjection_management(waterFlowPathRasterSaveName, coord_sys)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>DataAnalysis</category>
      </categories>
  </entry>
  <entry>
    <title>HDF convert to TIF</title>
    <url>/2020/10/16/HDF%20convert%20to%20TIF/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> arcpy</span><br><span class="line"><span class="keyword">import</span>  os</span><br><span class="line"><span class="keyword">from</span> arcpy.sa <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> envipy</span><br><span class="line">arcpy.CheckOutExtension(<span class="string">&quot;Spatial&quot;</span>)</span><br><span class="line">arcpy.env.overwriteOutput = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">name=[<span class="string">&quot;h23v04&quot;</span>,<span class="string">&quot;h24v04&quot;</span>,<span class="string">&quot;h25v04&quot;</span>,<span class="string">&quot;h23v05&quot;</span>,<span class="string">&quot;h24v05&quot;</span>,<span class="string">&quot;h25v05&quot;</span>,<span class="string">&quot;h26v05&quot;</span>,<span class="string">&quot;h25v06&quot;</span>,<span class="string">&quot;h26v06&quot;</span>,<span class="string">&quot;h27v06&quot;</span>]</span><br><span class="line"><span class="comment"># parameter</span></span><br><span class="line">path=<span class="string">&quot;E:\\MODIS&quot;</span></span><br><span class="line">shp=<span class="string">&quot;E:\\MODIS\\tibetALB_Dissolve.shp&quot;</span></span><br><span class="line">Sprj=<span class="string">&quot;E:\\MODIS\\Sinusoidal.prj&quot;</span></span><br><span class="line">Albprj=<span class="string">&quot;E:\\MODIS\\Albers_Conic_Equal_Area.prj&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(name)):</span><br><span class="line">    img=name[i]</span><br><span class="line">    imgarray=[]</span><br><span class="line">    f_list = os.listdir(path)</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> f_list:</span><br><span class="line">        filename = path + <span class="string">&quot;\\&quot;</span> + file</span><br><span class="line">        <span class="keyword">if</span> os.path.splitext(file)[<span class="number">1</span>] == <span class="string">&#x27;.hdf&#x27;</span> <span class="keyword">and</span> filename.split(<span class="string">&quot;.&quot;</span>)[<span class="number">2</span>][<span class="number">0</span>:<span class="number">6</span>] == img:</span><br><span class="line">            hdf = path + <span class="string">&quot;\\&quot;</span> + file</span><br><span class="line">            tif = path+<span class="string">&quot;\\&quot;</span>+os.path.splitext(file)[<span class="number">0</span>] + <span class="string">&quot;.tif&quot;</span></span><br><span class="line">            <span class="keyword">print</span> hdf</span><br><span class="line">            <span class="keyword">print</span> tif</span><br><span class="line">            <span class="comment"># Extract 0-band subdataset from HDF</span></span><br><span class="line">            arcpy.ExtractSubDataset_management(hdf, tif, <span class="string">&quot;0&quot;</span>)</span><br><span class="line">            <span class="comment"># DefineProjection</span></span><br><span class="line">            arcpy.DefineProjection_management(tif, Sprj)</span><br><span class="line">            imgarray.append(tif)</span><br><span class="line">    outCellStatistics = CellStatistics(imgarray, <span class="string">&quot;MEAN&quot;</span>, <span class="string">&quot;DATA&quot;</span>)</span><br><span class="line">    <span class="comment"># Save the output</span></span><br><span class="line">    outCellStatistics.save(<span class="string">&quot;E:\\MODIS\\result\\&quot;</span>+img+<span class="string">&quot;_2015NDVI_MEAN.tif&quot;</span>)</span><br><span class="line">f_list = os.listdir(<span class="string">&quot;E:\\MODIS\\result&quot;</span>)</span><br><span class="line">rasterarray = []</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> f_list:</span><br><span class="line">    filename = path + <span class="string">&quot;\\result\\&quot;</span> + file</span><br><span class="line">    <span class="keyword">if</span> os.path.splitext(file)[<span class="number">1</span>] == <span class="string">&quot;.tif&quot;</span>:</span><br><span class="line">        rasterarray.append(filename)</span><br><span class="line"><span class="keyword">print</span> rasterarray</span><br><span class="line">arcpy.MosaicToNewRaster_management(rasterarray,<span class="string">&quot;E:\\MODIS\\result&quot;</span>,<span class="string">&quot;NDVI2015_m.tif&quot;</span>,<span class="string">&quot;&quot;</span>, <span class="string">&quot;16_BIT_SIGNED&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;LAST&quot;</span>, <span class="string">&quot;FIRST&quot;</span>)</span><br><span class="line"><span class="comment"># Project transfer</span></span><br><span class="line">arcpy.ProjectRaster_management(<span class="string">&quot;E:\\MODIS\\result\\NDVI2015_m.tif&quot;</span>, <span class="string">&quot;E:\\MODIS\\result\\NDVI2015_alb.tif&quot;</span>, Albprj, <span class="string">&quot;&quot;</span>,<span class="string">&quot;250&quot;</span>, <span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Extract</span></span><br><span class="line"><span class="comment"># outExtractByMask = ExtractByMask(&quot;E:\\MODIS\\result\\NDVI2015_alb.tif&quot;, shp)</span></span><br><span class="line"><span class="comment"># Save the output</span></span><br><span class="line"><span class="comment"># outExtractByMask.save(&quot;E:\\MODIS\\result\\Tibet_NDVI2015_int_alb.tif&quot;)</span></span><br><span class="line"><span class="comment"># intRaster=arcpy.Raster(&quot;E:\\MODIS\\result\\Tibet_NDVI2015_int_alb.tif&quot;)</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>DataConverion</category>
      </categories>
  </entry>
  <entry>
    <title>LandScan global population distribution data</title>
    <url>/2020/11/23/LandScan-global-population-distribution-data/</url>
    <content><![CDATA[<h1 id="Data-Source"><a href="#Data-Source" class="headerlink" title="Data Source"></a>Data Source</h1><p><a href="https://www.satpalda.com/product/landscan/">https://www.satpalda.com/product/landscan/</a></p>
<h1 id="Data-Preview"><a href="#Data-Preview" class="headerlink" title="Data Preview"></a>Data Preview</h1> <div style="margin: 0 auto;overflow: hidden;">
 <img src="/2020/11/23/LandScan-global-population-distribution-data/Data_LandScan.png" alt>
 </div>

<h1 id="Download"><a href="#Download" class="headerlink" title="Download"></a>Download</h1><h2 id="Instruction-Document"><a href="#Instruction-Document" class="headerlink" title="Instruction Document"></a>Instruction Document</h2><p><a href="source/download/LandScan.pdf">LandScan.pdf download</a></p>
<h2 id="LandScan-Global-2000-zip"><a href="#LandScan-Global-2000-zip" class="headerlink" title="LandScan Global 2000.zip"></a>LandScan Global 2000.zip</h2><p>link：<a href="https://pan.baidu.com/s/189e1dKLJJjZC5D08-mAjtA">https://pan.baidu.com/s/189e1dKLJJjZC5D08-mAjtA</a><br>code：cq6a<br>size: 72.31MB</p>
<h2 id="LandScan-Global-2001-zip"><a href="#LandScan-Global-2001-zip" class="headerlink" title="LandScan Global 2001.zip"></a>LandScan Global 2001.zip</h2><p>link：<a href="https://pan.baidu.com/s/1q4BnAbMZQkIkBHZ6d73Q3w">https://pan.baidu.com/s/1q4BnAbMZQkIkBHZ6d73Q3w</a><br>code：ytv4<br>size: 74.15MB</p>
<h2 id="LandScan-Global-2002-zip"><a href="#LandScan-Global-2002-zip" class="headerlink" title="LandScan Global 2002.zip"></a>LandScan Global 2002.zip</h2><p>link：<a href="https://pan.baidu.com/s/1vHti6PhElqe1X7jh1_lMCw">https://pan.baidu.com/s/1vHti6PhElqe1X7jh1_lMCw</a><br>code：5l55<br>size: 75.58MB</p>
<h2 id="LandScan-Global-2003-zip"><a href="#LandScan-Global-2003-zip" class="headerlink" title="LandScan Global 2003.zip"></a>LandScan Global 2003.zip</h2><p>link：<a href="https://pan.baidu.com/s/1MJUuyaYTndzmMZ2Wys1XJw">https://pan.baidu.com/s/1MJUuyaYTndzmMZ2Wys1XJw</a><br>code：eqzz<br>size: 75.28MB</p>
<h2 id="LandScan-Global-2004-zip"><a href="#LandScan-Global-2004-zip" class="headerlink" title="LandScan Global 2004.zip"></a>LandScan Global 2004.zip</h2><p>link：<a href="https://pan.baidu.com/s/1vxhanDf3-z4wd6Xsi2szJw">https://pan.baidu.com/s/1vxhanDf3-z4wd6Xsi2szJw</a><br>code：dh6e<br>size: 74.45MB</p>
<h2 id="LandScan-Global-2005-zip"><a href="#LandScan-Global-2005-zip" class="headerlink" title="LandScan Global 2005.zip"></a>LandScan Global 2005.zip</h2><p>link：<a href="https://pan.baidu.com/s/1LnUzehqMDoaRImXCQ4DnlA">https://pan.baidu.com/s/1LnUzehqMDoaRImXCQ4DnlA</a><br>code：sro9<br>size: 73.96MB</p>
<h2 id="LandScan-Global-2006-zip"><a href="#LandScan-Global-2006-zip" class="headerlink" title="LandScan Global 2006.zip"></a>LandScan Global 2006.zip</h2><p>link：<a href="https://pan.baidu.com/s/1YaTWfGW9Ya0EDTldfdGwkA">https://pan.baidu.com/s/1YaTWfGW9Ya0EDTldfdGwkA</a><br>code：w6tb<br>size: 73.80MB</p>
<h2 id="LandScan-Global-2007-zip"><a href="#LandScan-Global-2007-zip" class="headerlink" title="LandScan Global 2007.zip"></a>LandScan Global 2007.zip</h2><p>link：<a href="https://pan.baidu.com/s/1Sf2EIpccNfk0QUQ2lQEkeQ">https://pan.baidu.com/s/1Sf2EIpccNfk0QUQ2lQEkeQ</a><br>code：armv<br>size: 74.25MB</p>
<h2 id="LandScan-Global-2008-zip"><a href="#LandScan-Global-2008-zip" class="headerlink" title="LandScan Global 2008.zip"></a>LandScan Global 2008.zip</h2><p>link：<a href="https://pan.baidu.com/s/1lEEuOfJXgdjSaEW382LOKQ">https://pan.baidu.com/s/1lEEuOfJXgdjSaEW382LOKQ</a><br>code：4ulc<br>size: 74.63MB</p>
<h2 id="LandScan-Global-2009-zip"><a href="#LandScan-Global-2009-zip" class="headerlink" title="LandScan Global 2009.zip"></a>LandScan Global 2009.zip</h2><p>link：<a href="https://pan.baidu.com/s/1tWOiEoWDdbes-PZ4XrCI_Q">https://pan.baidu.com/s/1tWOiEoWDdbes-PZ4XrCI_Q</a><br>code：f9kf<br>size: 74.84MB</p>
<h2 id="LandScan-Global-2010-zip"><a href="#LandScan-Global-2010-zip" class="headerlink" title="LandScan Global 2010.zip"></a>LandScan Global 2010.zip</h2><p>link：<a href="https://pan.baidu.com/s/1yt7RdkAqQNLdxy0_dgaZLw">https://pan.baidu.com/s/1yt7RdkAqQNLdxy0_dgaZLw</a><br>code：ll61<br>size: 75.26MB</p>
<h2 id="LandScan-Global-2011-zip"><a href="#LandScan-Global-2011-zip" class="headerlink" title="LandScan Global 2011.zip"></a>LandScan Global 2011.zip</h2><p>link：<a href="https://pan.baidu.com/s/1GX-b77XfC2qnX2fmJGDplA">https://pan.baidu.com/s/1GX-b77XfC2qnX2fmJGDplA</a><br>code：uxid<br>size: 74.72MB</p>
<h2 id="LandScan-Global-2012-zip"><a href="#LandScan-Global-2012-zip" class="headerlink" title="LandScan Global 2012.zip"></a>LandScan Global 2012.zip</h2><p>link：<a href="https://pan.baidu.com/s/1G5-IdenApWNMQt-P-Nx0hA">https://pan.baidu.com/s/1G5-IdenApWNMQt-P-Nx0hA</a><br>code：2g1n<br>size: 73.20MB</p>
<h2 id="LandScan-Global-2013-zip"><a href="#LandScan-Global-2013-zip" class="headerlink" title="LandScan Global 2013.zip"></a>LandScan Global 2013.zip</h2><p>link：<a href="https://pan.baidu.com/s/1jAcXz-gW_BdiJeJuNZog7Q">https://pan.baidu.com/s/1jAcXz-gW_BdiJeJuNZog7Q</a><br>code：s14c<br>size: 70.36MB</p>
<h2 id="LandScan-Global-2014-zip"><a href="#LandScan-Global-2014-zip" class="headerlink" title="LandScan Global 2014.zip"></a>LandScan Global 2014.zip</h2><p>link：<a href="https://pan.baidu.com/s/1HdYheGyMNHVdAOZFXshFlw">https://pan.baidu.com/s/1HdYheGyMNHVdAOZFXshFlw</a><br>code：m2x4<br>size: 75.07MB</p>
<h2 id="LandScan-Global-2015-zip"><a href="#LandScan-Global-2015-zip" class="headerlink" title="LandScan Global 2015.zip"></a>LandScan Global 2015.zip</h2><p>link：<a href="https://pan.baidu.com/s/1vdmkPJjYePIlemKXPzDCkQ">https://pan.baidu.com/s/1vdmkPJjYePIlemKXPzDCkQ</a><br>code：vywg<br>size: 74.97MB</p>
<h2 id="LandScan-Global-2016-zip"><a href="#LandScan-Global-2016-zip" class="headerlink" title="LandScan Global 2016.zip"></a>LandScan Global 2016.zip</h2><p>link：<a href="https://pan.baidu.com/s/1N2zvpEcHBqxqb5GKgmcNYQ">https://pan.baidu.com/s/1N2zvpEcHBqxqb5GKgmcNYQ</a><br>code：qcfg<br>size: 74.13MB</p>
<h2 id="LandScan-Global-2017-zip"><a href="#LandScan-Global-2017-zip" class="headerlink" title="LandScan Global 2017.zip"></a>LandScan Global 2017.zip</h2><p>link：<a href="https://pan.baidu.com/s/1mVRI1bOwprwfxADMSu4oOA">https://pan.baidu.com/s/1mVRI1bOwprwfxADMSu4oOA</a><br>code：2egy<br>size: 73.21MB</p>
]]></content>
      <categories>
        <category>Data</category>
      </categories>
  </entry>
  <entry>
    <title>Mosaic to new raster</title>
    <url>/2020/10/20/Mosaic-to-new-raster/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> arcpy</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">arcpy.CheckOutExtension(<span class="string">&quot;Spatial&quot;</span>)</span><br><span class="line">arcpy.env.overwriteOutput = <span class="literal">True</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mosaicToNewRaster</span>(<span class="params">inputFolder,outputFolder,tempfolder,outputname</span>):</span></span><br><span class="line">    infolder = inputFolder + <span class="string">&quot;\\&quot;</span></span><br><span class="line">    outfolder = outputFolder + <span class="string">&quot;\\&quot;</span></span><br><span class="line">    tempfolder = tempfolder + <span class="string">&quot;\\&quot;</span></span><br><span class="line">    rasters = []</span><br><span class="line">    datanames = os.listdir(infolder)</span><br><span class="line">    <span class="keyword">for</span> dataname <span class="keyword">in</span> datanames:</span><br><span class="line">        <span class="keyword">if</span> os.path.splitext(dataname)[<span class="number">1</span>] == <span class="string">&#x27;.tif&#x27;</span>:</span><br><span class="line">            <span class="keyword">print</span>  dataname</span><br><span class="line">            inputfullname = infolder + dataname</span><br><span class="line">            <span class="keyword">print</span> <span class="string">&quot;inputfullname: &quot;</span> + inputfullname</span><br><span class="line">            raster = arcpy.Raster(inputfullname)</span><br><span class="line">            <span class="comment"># remove black border</span></span><br><span class="line">            deldarkfullname = tempfolder + <span class="string">&quot;temp&quot;</span> + dataname</span><br><span class="line">            arcpy.CopyRaster_management(raster, deldarkfullname, <span class="string">&quot;DEFAULTS&quot;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;8_BIT_UNSIGNED&quot;</span>)</span><br><span class="line">            raster2 = arcpy.Raster(deldarkfullname)</span><br><span class="line">            rasters.append(raster2)</span><br><span class="line">    <span class="comment"># mosaic raster</span></span><br><span class="line">    arcpy.MosaicToNewRaster_management(rasters, outfolder, outputname, <span class="string">&quot;&quot;</span>, <span class="string">&quot;8_BIT_UNSIGNED&quot;</span>, <span class="string">&quot;30&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;MINIMUM&quot;</span>, <span class="string">&quot;FIRST&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;Mosaic success&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Raster</category>
      </categories>
  </entry>
  <entry>
    <title>Multi-field IDW interpolation</title>
    <url>/2020/10/21/Multi-field-IDW-interpolation/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> arcpy</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> arcpy.sa <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> arcpy <span class="keyword">import</span> env</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">arcpy.CheckOutExtension(<span class="string">&quot;Spatial&quot;</span>)</span><br><span class="line">env.overwriteOutput=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getExtentOfRasterOrShp</span>(<span class="params">filePath</span>):</span></span><br><span class="line">    folder_path, file_name = os.path.split(filePath)</span><br><span class="line">    arcpy.env.workspace =folder_path</span><br><span class="line">    ext=file_name[<span class="number">-4</span>:]</span><br><span class="line">    <span class="keyword">if</span> ext==<span class="string">&quot;.tif&quot;</span>:</span><br><span class="line">        extent=arcpy.Raster(filePath).extent</span><br><span class="line">        <span class="keyword">return</span> str(extent.XMin)+<span class="string">&quot; &quot;</span>+str(extent.YMin)+<span class="string">&quot; &quot;</span>+str(extent.XMax)+<span class="string">&quot; &quot;</span>+str(extent.YMax)</span><br><span class="line">    <span class="keyword">elif</span> ext==<span class="string">&quot;.shp&quot;</span>:</span><br><span class="line">        xmin=[]</span><br><span class="line">        xmax=[]</span><br><span class="line">        ymin=[]</span><br><span class="line">        ymax=[]</span><br><span class="line">        <span class="keyword">with</span> arcpy.da.SearchCursor(filePath, <span class="string">&#x27;SHAPE@&#x27;</span>) <span class="keyword">as</span> cursor:</span><br><span class="line">            <span class="keyword">for</span> row <span class="keyword">in</span> cursor:</span><br><span class="line">                result = row[<span class="number">0</span>].extent</span><br><span class="line">                xmin.append(result.XMin)</span><br><span class="line">                xmax.append(result.XMax)</span><br><span class="line">                ymin.append(result.YMin)</span><br><span class="line">                ymax.append(result.YMax)</span><br><span class="line">        xmin.sort()</span><br><span class="line">        ymin.sort()</span><br><span class="line">        xmax.sort(reverse=<span class="literal">True</span>)</span><br><span class="line">        ymax.sort(reverse=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> str(xmin[<span class="number">0</span>])+<span class="string">&quot; &quot;</span>+str(ymin[<span class="number">0</span>])+<span class="string">&quot; &quot;</span>+str(xmax[<span class="number">0</span>])+<span class="string">&quot; &quot;</span>+str(ymax[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">MultiFieldIDWInterpolation</span>(<span class="params">extentShp,shpFilePath,fieldArray,cellSize,power,searchRadius,resultSaveFolder</span>):</span></span><br><span class="line">    arcpy.env.workspace =resultSaveFolder</span><br><span class="line">    <span class="comment"># Get extent</span></span><br><span class="line">    extent=getExtentOfRasterOrShp(extentShp)</span><br><span class="line">    arcpy.env.extent=extent</span><br><span class="line">    fields = arcpy.ListFields(shpFilePath)</span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> fields:</span><br><span class="line">        <span class="keyword">if</span> f.name <span class="keyword">in</span> fieldArray:</span><br><span class="line">            fieldname=fieldArray[fieldArray.index(f.name)]</span><br><span class="line">            <span class="comment"># Execute IDW</span></span><br><span class="line">            outIDW = Idw(shpFilePath, fieldname,cellSize, power, searchRadius)</span><br><span class="line">            <span class="comment"># Save the output</span></span><br><span class="line">            outIDW.save(resultSaveFolder+<span class="string">&quot;\\&quot;</span>+fieldname+<span class="string">&quot;IDW.tif&quot;</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&quot;done!&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>BatchDataAnalysis</category>
      </categories>
  </entry>
  <entry>
    <title>Non source inundated analysis based on specified amount of water</title>
    <url>/2020/11/11/Non%20source%20inundated%20analysis%20based%20on%20specified%20amount%20of%20water/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> arcpy</span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"><span class="keyword">from</span> arcpy <span class="keyword">import</span> env</span><br><span class="line"><span class="keyword">from</span> arcpy.sa <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># Check out the ArcGIS Spatial Analyst extension license</span></span><br><span class="line">arcpy.CheckOutExtension(<span class="string">&quot;Spatial&quot;</span>)</span><br><span class="line">env.workspace = <span class="string">&quot;D:\\NonSourceInundation\\result&quot;</span></span><br><span class="line">env.overwriteOutput = <span class="literal">True</span></span><br><span class="line"><span class="comment"># original_para</span></span><br><span class="line">dem=<span class="string">&quot;D:\\NonSourceInundation\\dem.tif&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set environment settings</span></span><br><span class="line">cellXSzie = float(arcpy.GetRasterProperties_management(dem, <span class="string">&quot;CELLSIZEX&quot;</span>)[<span class="number">0</span>])</span><br><span class="line">cellYSzie = float(arcpy.GetRasterProperties_management(dem, <span class="string">&quot;CELLSIZEY&quot;</span>)[<span class="number">0</span>])</span><br><span class="line">maxdem=float(arcpy.GetRasterProperties_management(dem,<span class="string">&quot;MAXIMUM&quot;</span>)[<span class="number">0</span>])</span><br><span class="line">mindem=float(arcpy.GetRasterProperties_management(dem,<span class="string">&quot;MINIMUM&quot;</span>)[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getValueSum</span>(<span class="params">raster</span>):</span></span><br><span class="line">    sum=<span class="number">0</span></span><br><span class="line">    rstArray = arcpy.RasterToNumPyArray(raster)</span><br><span class="line">    rows, cols = rstArray.shape</span><br><span class="line">    <span class="keyword">for</span> rowNum <span class="keyword">in</span> xrange(rows):</span><br><span class="line">        <span class="keyword">for</span> colNum <span class="keyword">in</span> xrange(cols):</span><br><span class="line">            v=rstArray.item(rowNum, colNum)</span><br><span class="line">            sum=sum+v</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line"></span><br><span class="line"><span class="comment">#  Calculate volume and extent of inundation based on flood levels</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getVandRaster</span>(<span class="params">cellxsize,cellysize,h</span>):</span></span><br><span class="line">    inRaster = Raster(dem)</span><br><span class="line">    deepRaster = Con(inRaster&lt;=h, h-inRaster, <span class="number">0</span>)</span><br><span class="line">    deepRaster2 = SetNull(deepRaster == <span class="number">0</span>,deepRaster)</span><br><span class="line">    Vraster=deepRaster*cellxsize*cellysize</span><br><span class="line">    Vraster2=Con(IsNull(Vraster),<span class="number">0</span>,Vraster)</span><br><span class="line">    V=getValueSum(Vraster2)</span><br><span class="line">    <span class="comment"># Set the flood amount (m3)</span></span><br><span class="line">    <span class="keyword">if</span> V&gt;=<span class="number">1921911.658</span>:</span><br><span class="line">        deepRaster2.save(<span class="string">&quot;Level&quot;</span>+str(h)+<span class="string">&quot;m_V&quot;</span>+str(V)+<span class="string">&quot;m3.tif&quot;</span>)</span><br><span class="line">        <span class="keyword">print</span> <span class="string">&quot;Level&quot;</span>+str(h)+<span class="string">&quot;m_V&quot;</span>+str(V)+<span class="string">&quot;m3.tif&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">waterLevel=mindem</span><br><span class="line"><span class="comment"># Rate of water level rise (m)</span></span><br><span class="line">step=<span class="number">0.01</span></span><br><span class="line"><span class="keyword">while</span> waterLevel&lt;maxdem:</span><br><span class="line">    <span class="keyword">if</span> getVandRaster(cellXSzie,cellYSzie,waterLevel)==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        waterLevel=waterLevel+step</span><br></pre></td></tr></table></figure>
 <div style="margin: 0 auto;overflow: hidden;">
 <img src="/2020/11/11/Non%20source%20inundated%20analysis%20based%20on%20specified%20amount%20of%20water/NonSourceFlood.png" alt>
 </div>]]></content>
      <categories>
        <category>DataAnalysis</category>
      </categories>
  </entry>
  <entry>
    <title>One-dimensional linear regression of raster</title>
    <url>/2020/10/22/One-dimensional-linear-regression-of-raster/</url>
    <content><![CDATA[<p>The trend analysis is based on one-dimensional linear regression trend analysis, which can simulate the trend of each raster, and then integrated to reflect the spatial and temporal changes of the whole region, calculated by the following formula.</p>
<script type="math/tex; mode=display">
Slope=\frac{n×\sum_{i=1}^{n}{(i×M_{r,i})-(\sum_{i=1}^{n}i)(\sum_{i=1}^{n}M_{r,i})}}{n×\sum_{i=1}^{n}i^2-(\sum_{i=1}^{n}i)^2}</script><p>where <em>Slope</em> is the slope of the pixel <em>r</em> regression equation, the variable <em>i</em> is the time series number from 1 to <em>n</em>, <em>n</em> is the time span, and <em>M<sub>r,i</sub></em> is the maximum <em>r</em> value in the nth period.<br>If <em>Slope</em> &gt; 0, it means that the change in <em>r</em> over time shows an upward trend, and the larger the <em>Slope</em> value, the more obvious the upward trend, and conversely, if <em>Slope</em> &lt; 0, it means that the change in <em>r</em> over time shows a downward trend.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> arcpy</span><br><span class="line"><span class="keyword">from</span> arcpy.sa <span class="keyword">import</span> *</span><br><span class="line">arcpy.CheckOutExtension(<span class="string">&quot;Spatial&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rasterSlope</span>(<span class="params">rasterFolder,resultSlopeSavePath</span>):</span></span><br><span class="line">	folderin = rasterFolder</span><br><span class="line">	arcpy.env.workspace = folderin</span><br><span class="line">	rlist = arcpy.ListRasters()</span><br><span class="line">	N=len(rlist)</span><br><span class="line">	i = <span class="number">0</span></span><br><span class="line">	sum1 = <span class="number">0</span></span><br><span class="line">	sum2 = <span class="number">0</span></span><br><span class="line">	sum3 = <span class="number">0</span></span><br><span class="line">	sum4 = <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> r <span class="keyword">in</span> rlist:</span><br><span class="line">		i += <span class="number">1</span></span><br><span class="line">		print(i)</span><br><span class="line">		sum1 += i * Raster(r)</span><br><span class="line">		sum2 += Raster(r)</span><br><span class="line">		sum3 += i * i</span><br><span class="line">		sum4 += i</span><br><span class="line">		print(r)</span><br><span class="line">	result = (N * sum1 - ((N + <span class="number">1</span>) * N / <span class="number">2</span>) * sum2) / (N * sum3 - sum4 * sum4)</span><br><span class="line">	result.save(resultSlopeSavePath)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>DataAnalysis</category>
      </categories>
  </entry>
  <entry>
    <title>Source inundated analysis</title>
    <url>/2020/11/11/Source%20inundated%20analysis/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> arcpy</span><br><span class="line"><span class="keyword">from</span> arcpy <span class="keyword">import</span> env</span><br><span class="line"><span class="keyword">from</span> arcpy.sa <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">arcpy.CheckOutExtension(<span class="string">&quot;Spatial&quot;</span>)</span><br><span class="line">env.overwriteOutput = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getLocationOfPointInGrid</span>(<span class="params">rasterPath,pointPath,worksapceTempPath</span>):</span></span><br><span class="line">    env.workspace = worksapceTempPath</span><br><span class="line">    cellXSzie = arcpy.GetRasterProperties_management(rasterPath, <span class="string">&quot;CELLSIZEX&quot;</span>)</span><br><span class="line">    cellYSzie = arcpy.GetRasterProperties_management(rasterPath, <span class="string">&quot;CELLSIZEY&quot;</span>)</span><br><span class="line">    leftPosition = arcpy.GetRasterProperties_management(rasterPath, <span class="string">&quot;LEFT&quot;</span>)</span><br><span class="line">    bottomPosition = arcpy.GetRasterProperties_management(rasterPath, <span class="string">&quot;BOTTOM&quot;</span>)</span><br><span class="line">    <span class="comment"># Converting raster to array</span></span><br><span class="line">    rstArray = arcpy.RasterToNumPyArray(arcpy.Raster(rasterPath))</span><br><span class="line">    <span class="comment"># Number of rows and columns of raster</span></span><br><span class="line">    rows, cols = rstArray.shape</span><br><span class="line">    <span class="comment"># Create row and column number grid</span></span><br><span class="line">    rowcell = &#123;&#125;</span><br><span class="line">    colcell = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> rowNum <span class="keyword">in</span> xrange(rows):</span><br><span class="line">        <span class="keyword">for</span> colNum <span class="keyword">in</span> xrange(cols):</span><br><span class="line">            rowcell[(rowNum, colNum)] = [rowNum]</span><br><span class="line">            colcell[(rowNum, colNum)] = [colNum]</span><br><span class="line">    <span class="keyword">for</span> rowNum <span class="keyword">in</span> xrange(rows):</span><br><span class="line">        <span class="keyword">for</span> colNum <span class="keyword">in</span> xrange(cols):</span><br><span class="line">            rstArray[(rowNum, colNum)] = rowcell[(rowNum, colNum)][<span class="number">0</span>]</span><br><span class="line">    result = arcpy.NumPyArrayToRaster(rstArray, arcpy.Point(leftPosition[<span class="number">0</span>], bottomPosition[<span class="number">0</span>]), float(cellXSzie[<span class="number">0</span>]),float(cellYSzie[<span class="number">0</span>]))</span><br><span class="line">    result.save(<span class="string">&quot;row.tif&quot;</span>)</span><br><span class="line">    dsc = arcpy.Describe(pointPath)</span><br><span class="line">    coord_sys = dsc.spatialReference</span><br><span class="line">    arcpy.DefineProjection_management(<span class="string">&quot;row.tif&quot;</span>, coord_sys)</span><br><span class="line">    <span class="keyword">for</span> rowNum <span class="keyword">in</span> xrange(rows):</span><br><span class="line">        <span class="keyword">for</span> colNum <span class="keyword">in</span> xrange(cols):</span><br><span class="line">            rstArray[(rowNum, colNum)] = colcell[(rowNum, colNum)][<span class="number">0</span>]</span><br><span class="line">    result = arcpy.NumPyArrayToRaster(rstArray, arcpy.Point(leftPosition[<span class="number">0</span>], bottomPosition[<span class="number">0</span>]), float(cellXSzie[<span class="number">0</span>]),float(cellYSzie[<span class="number">0</span>]))</span><br><span class="line">    result.save(<span class="string">&quot;col.tif&quot;</span>)</span><br><span class="line">    dsc = arcpy.Describe(pointPath)</span><br><span class="line">    coord_sys = dsc.spatialReference</span><br><span class="line">    arcpy.DefineProjection_management(<span class="string">&quot;col.tif&quot;</span>, coord_sys)</span><br><span class="line">    <span class="comment"># Get the row and column of the point</span></span><br><span class="line">    inPointFeatures = pointPath</span><br><span class="line">    inRasterList = [[<span class="string">&quot;row.tif&quot;</span>, <span class="string">&quot;row&quot;</span>], [<span class="string">&quot;col.tif&quot;</span>, <span class="string">&quot;col&quot;</span>]]</span><br><span class="line">    <span class="comment"># Execute ExtractValuesTo Points</span></span><br><span class="line">    ExtractMultiValuesToPoints(inPointFeatures, inRasterList, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    cursor = arcpy.SearchCursor(inPointFeatures)</span><br><span class="line">    rowN = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    colN = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> rowcol <span class="keyword">in</span> cursor:</span><br><span class="line">        rowN = int(rowcol.row)</span><br><span class="line">        colN = int(rowcol.col)</span><br><span class="line">    <span class="keyword">return</span> [rowN, colN]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span>  <span class="title">getfloodcell</span>(<span class="params">waterLevel,sourcerow,sourcecol,elevationCell,rows,cols</span>):</span></span><br><span class="line">    elevationCellCopy = copy.deepcopy(elevationCell)</span><br><span class="line">    floodbufferArray=[]</span><br><span class="line">    floodbufferArray .append(elevationCellCopy[sourcerow,sourcecol])</span><br><span class="line">    <span class="keyword">while</span>(len(floodbufferArray)!=<span class="number">0</span>):</span><br><span class="line">        rowfirst=floodbufferArray[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">        colfirst=floodbufferArray[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">        elevationCellCopy[(rowfirst,colfirst)][<span class="number">3</span>] = <span class="literal">True</span></span><br><span class="line">        floodbufferArray.pop(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> range(rowfirst - <span class="number">1</span>, rowfirst + <span class="number">2</span>):</span><br><span class="line">            <span class="keyword">for</span> col <span class="keyword">in</span> range(colfirst - <span class="number">1</span>, colfirst + <span class="number">2</span>):</span><br><span class="line">                <span class="keyword">if</span>(row&lt;rows <span class="keyword">and</span> col&lt;cols <span class="keyword">and</span> row&gt;=<span class="number">0</span> <span class="keyword">and</span> col&gt;=<span class="number">0</span>):</span><br><span class="line">                    elevationinfo=elevationCellCopy[(row,col)][<span class="number">2</span>]</span><br><span class="line">                    <span class="keyword">if</span> elevationinfo&lt;=waterLevel <span class="keyword">and</span> elevationCellCopy[(row,col)][<span class="number">3</span>]==<span class="literal">False</span>:</span><br><span class="line">                        elevationCellCopy[(row,col)][<span class="number">3</span>] = <span class="literal">True</span></span><br><span class="line">                        floodbufferArray.append((row, col))</span><br><span class="line">    <span class="keyword">return</span> elevationCellCopy</span><br><span class="line"></span><br><span class="line"><span class="comment"># original_para</span></span><br><span class="line">worksapce_path = <span class="string">&quot;D:\\sourceFlood\\temp&quot;</span></span><br><span class="line">dem = <span class="string">&quot;D:\\sourceFlood\\DEM.tif&quot;</span></span><br><span class="line">seed = <span class="string">&quot;D:\\sourceFlood\\seed.shp&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Convert elevation raster to array</span></span><br><span class="line">elevationCell=&#123;&#125;</span><br><span class="line">cellXSzie = arcpy.GetRasterProperties_management(dem, <span class="string">&quot;CELLSIZEX&quot;</span>)</span><br><span class="line">cellYSzie = arcpy.GetRasterProperties_management(dem, <span class="string">&quot;CELLSIZEY&quot;</span>)</span><br><span class="line">leftPosition = arcpy.GetRasterProperties_management(dem, <span class="string">&quot;LEFT&quot;</span>)</span><br><span class="line">topPosition = arcpy.GetRasterProperties_management(dem, <span class="string">&quot;TOP&quot;</span>)</span><br><span class="line">bottomPosition = arcpy.GetRasterProperties_management(dem, <span class="string">&quot;BOTTOM&quot;</span>)</span><br><span class="line">maxdem=arcpy.GetRasterProperties_management(dem,<span class="string">&quot;MAXIMUM&quot;</span>)</span><br><span class="line">mindem=arcpy.GetRasterProperties_management(dem,<span class="string">&quot;MINIMUM&quot;</span>)</span><br><span class="line">rstArray = arcpy.RasterToNumPyArray(arcpy.Raster(dem))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Number of rows and columns of dem</span></span><br><span class="line">rows, cols = rstArray.shape</span><br><span class="line"><span class="keyword">print</span> rows,cols</span><br><span class="line"><span class="keyword">for</span> rowNum <span class="keyword">in</span> xrange(rows):</span><br><span class="line">    <span class="keyword">for</span> colNum <span class="keyword">in</span> xrange(cols):</span><br><span class="line">        <span class="comment"># Set elevation raster pixel, initialize to no flooding</span></span><br><span class="line">        elevationCell[(rowNum, colNum)] = [rowNum,colNum,rstArray.item(rowNum, colNum), <span class="literal">False</span>]</span><br><span class="line"></span><br><span class="line">RowCol=getLocationOfPointInGrid(dem,seed,worksapce_path)</span><br><span class="line"><span class="comment"># Setting the inundation level 100</span></span><br><span class="line">floodelevationCell=getfloodcell(<span class="number">100</span>,RowCol[<span class="number">0</span>],RowCol[<span class="number">1</span>],elevationCell,rows,cols)</span><br><span class="line"><span class="comment"># Convert array to  raster</span></span><br><span class="line"><span class="keyword">for</span> rowNum <span class="keyword">in</span> xrange(rows):</span><br><span class="line">    <span class="keyword">for</span> colNum <span class="keyword">in</span> xrange(cols):</span><br><span class="line">        rstArray[(rowNum, colNum)] = floodelevationCell[(rowNum, colNum)][<span class="number">3</span>]</span><br><span class="line">result = arcpy.NumPyArrayToRaster(rstArray, arcpy.Point(leftPosition[<span class="number">0</span>], bottomPosition[<span class="number">0</span>]), float(cellXSzie[<span class="number">0</span>]),float(cellYSzie[<span class="number">0</span>]))</span><br><span class="line">result.save(<span class="string">&quot;D:\\sourceFlood\\result.tif&quot;</span>)</span><br></pre></td></tr></table></figure>
 <div style="margin: 0 auto;overflow: hidden;">
 <img src="/2020/11/11/Source%20inundated%20analysis/SourceFlood.png" alt>
 </div>]]></content>
      <categories>
        <category>DataAnalysis</category>
      </categories>
  </entry>
</search>
